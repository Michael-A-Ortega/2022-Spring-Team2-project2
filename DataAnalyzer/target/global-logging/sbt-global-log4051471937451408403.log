[0m[[0m[0mdebug[0m] [0m[0m> Exec(run, Some(01947f71-dfba-4535-b161-bb45a5ef9993), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / run[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to C:\Users\micha_j1zul72\scala\2022-Spring-Team2-project2\DataAnalyzer\target\scala-2.11\classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[31merror[0m] [0m[0morg.apache.spark.sql.AnalysisException: expression 'grouped_items_per_country.`prod_name`' is neither present in the group by, nor is it an aggregate function. Add to group by or wrap in first() (or first_value) if you don't care which value you get.;;[0m
[0m[[0m[31merror[0m] [0m[0mAggregate [country#10], [country#10, prod_name#37, max(units#32) AS max(units)#54][0m
[0m[[0m[31merror[0m] [0m[0m+- SubqueryAlias grouped_items_per_country[0m
[0m[[0m[31merror[0m] [0m[0m   +- Aggregate [prod_name#37, country#10], [prod_name#37, sum(cast(quantity#40 as double)) AS units#32, country#10][0m
[0m[[0m[31merror[0m] [0m[0m      +- Join Inner, (country#10 = country#43)[0m
[0m[[0m[31merror[0m] [0m[0m         :- SubqueryAlias cntry[0m
[0m[[0m[31merror[0m] [0m[0m         :  +- Distinct[0m
[0m[[0m[31merror[0m] [0m[0m         :     +- Project [country#10][0m
[0m[[0m[31merror[0m] [0m[0m         :        +- SubqueryAlias ecomerce_data[0m
[0m[[0m[31merror[0m] [0m[0m         :           +- Relation[order_id#0,customer_id#1,customer_name#2,prod_id#3,prod_name#4,prod_category#5,payment_type#6,quantity#7,price#8,datetime#9,country#10,city#11,website#12,pay_txn_id#13,payment_status#14,failed_note#15] csv[0m
[0m[[0m[31merror[0m] [0m[0m         +- SubqueryAlias ecomerce_data[0m
[0m[[0m[31merror[0m] [0m[0m            +- Relation[order_id#33,customer_id#34,customer_name#35,prod_id#36,prod_name#37,prod_category#38,payment_type#39,quantity#40,price#41,datetime#42,country#43,city#44,website#45,pay_txn_id#46,payment_status#47,failed_note#48] csv[0m
[0m[[0m[31merror[0m] [0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.failAnalysis(CheckAnalysis.scala:41)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.Analyzer.failAnalysis(Analyzer.scala:92)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.org$apache$spark$sql$catalyst$analysis$CheckAnalysis$class$$anonfun$$checkValidAggregateExpression$1(CheckAnalysis.scala:191)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$9.apply(CheckAnalysis.scala:224)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$9.apply(CheckAnalysis.scala:224)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.immutable.List.foreach(List.scala:392)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:224)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:84)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:127)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:84)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:92)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:105)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.QueryExecution.analyzed$lzycompute(QueryExecution.scala:57)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:55)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:47)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.Dataset$.ofRows(Dataset.scala:74)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:642)[0m
[0m[[0m[31merror[0m] [0m[0m	at Querey$.main(Querey.scala:66)[0m
[0m[[0m[31merror[0m] [0m[0m	at Querey.main(Querey.scala)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.lang.reflect.Method.invoke(Method.java:498)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.invokeMain(Run.scala:143)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.execute$1(Run.scala:93)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.$anonfun$runWithLoader$5(Run.scala:120)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run$.executeSuccess(Run.scala:186)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.runWithLoader(Run.scala:120)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Defaults$.$anonfun$bgRunTask$6(Defaults.scala:1983)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Defaults$.$anonfun$termWrapper$2(Defaults.scala:1922)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.util.Try$.apply(Try.scala:213)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.BackgroundThreadPool$BackgroundRunnable.run(DefaultBackgroundJobService.scala:369)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.lang.Thread.run(Thread.java:750)[0m
[0m[[0m[31merror[0m] [0m[0m(Compile / [31mrun[0m) org.apache.spark.sql.AnalysisException: expression 'grouped_items_per_country.`prod_name`' is neither present in the group by, nor is it an aggregate function. Add to group by or wrap in first() (or first_value) if you don't care which value you get.;;[0m
[0m[[0m[31merror[0m] [0m[0mAggregate [country#10], [country#10, prod_name#37, max(units#32) AS max(units)#54][0m
[0m[[0m[31merror[0m] [0m[0m+- SubqueryAlias grouped_items_per_country[0m
[0m[[0m[31merror[0m] [0m[0m   +- Aggregate [prod_name#37, country#10], [prod_name#37, sum(cast(quantity#40 as double)) AS units#32, country#10][0m
[0m[[0m[31merror[0m] [0m[0m      +- Join Inner, (country#10 = country#43)[0m
[0m[[0m[31merror[0m] [0m[0m         :- SubqueryAlias cntry[0m
[0m[[0m[31merror[0m] [0m[0m         :  +- Distinct[0m
[0m[[0m[31merror[0m] [0m[0m         :     +- Project [country#10][0m
[0m[[0m[31merror[0m] [0m[0m         :        +- SubqueryAlias ecomerce_data[0m
[0m[[0m[31merror[0m] [0m[0m         :           +- Relation[order_id#0,customer_id#1,customer_name#2,prod_id#3,prod_name#4,prod_category#5,payment_type#6,quantity#7,price#8,datetime#9,country#10,city#11,website#12,pay_txn_id#13,payment_status#14,failed_note#15] csv[0m
[0m[[0m[31merror[0m] [0m[0m         +- SubqueryAlias ecomerce_data[0m
[0m[[0m[31merror[0m] [0m[0m            +- Relation[order_id#33,customer_id#34,customer_name#35,prod_id#36,prod_name#37,prod_category#38,payment_type#39,quantity#40,price#41,datetime#42,country#43,city#44,website#45,pay_txn_id#46,payment_status#47,failed_note#48] csv[0m
[0m[[0m[31merror[0m] [0m[0mTotal time: 6 s, completed May 27, 2022 9:37:23 AM[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
